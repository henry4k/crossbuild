#!/bin/sh

_executed_tests=0

plan()
{
    local count=${1:?}
    echo "1..$count"
}

diag_stream()
{
    sed 's/^/# /'
}

diag()
{
    echo "$@" | diag-stream
}

ok()
{
    local result=${1:?}
    local name=$2

    _executed_tests=$(($_executed_tests + 1))

    if [[ $result -ne 0 ]]; then
        echo -n 'not '
    fi
    echo -n "ok $_executed_tests"

    if [[ -n "$name" ]]; then
        echo -n " - $name"
    fi

    echo # print \n
}

skip()
{
    local reason=$1
    _executed_tests=$(($_executed_tests + 1))
    echo "ok $_executed_tests # skip $reason"
}

docker_env()
{
    docker image inspect \
        --format '{{range $_, $e := .Config.Env}}{{println $e}}{{end}}' \
        "$(cat .image_id)"
}

triples()
{
    docker_env | \
        sed --quiet --regexp-extended 's/^.+?_TRIPLES=(.+)$/\1/p' | \
        tr ',' "\n"
}

test_name="$(basename "$0" .t)"
triples=$(triples)

triple_count=0
for _ in $triples; do
    triple_count=$(($triple_count + 1))
done

plan $triple_count
for triple in $triples; do
    install_dir="$(mktemp --tmpdir --directory "crossbuild-$test_name-$triple.XXX")"
    log="$(mktemp --tmpdir "crossbuild-$test_name-$triple.log.XXX")"
    ./build --steps ',install' \
        "$triple" \
        "test/$test_name" \
        "$install_dir" \
        2>&1 > "$log"
    result=$?
    if [ $result -ne 0 ]; then
        cat "$log" | diag_stream
    fi
    ok $result "$triple"
    rm -r "$install_dir" "$log"
done

# vim: set filetype=sh:
